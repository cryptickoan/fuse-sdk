/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ChainlinkPriceOracleV2Interface extends utils.Interface {
  functions: {
    "BTC_ETH_PRICE_FEED()": FunctionFragment;
    "ETH_USD_PRICE_FEED()": FunctionFragment;
    "admin()": FunctionFragment;
    "canAdminOverwrite()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "feedBaseCurrencies(address)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "price(address)": FunctionFragment;
    "priceFeeds(address)": FunctionFragment;
    "setPriceFeeds(address[],address[],uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BTC_ETH_PRICE_FEED"
      | "ETH_USD_PRICE_FEED"
      | "admin"
      | "canAdminOverwrite"
      | "changeAdmin"
      | "feedBaseCurrencies"
      | "getUnderlyingPrice"
      | "price"
      | "priceFeeds"
      | "setPriceFeeds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BTC_ETH_PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_USD_PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canAdminOverwrite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feedBaseCurrencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeeds",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BTC_ETH_PRICE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_USD_PRICE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canAdminOverwrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedBaseCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeeds",
    data: BytesLike
  ): Result;

  events: {
    "NewAdmin(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
}

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface ChainlinkPriceOracleV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkPriceOracleV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BTC_ETH_PRICE_FEED(overrides?: CallOverrides): Promise<[string]>;

    ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<[boolean]>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feedBaseCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setPriceFeeds(
      underlyings: PromiseOrValue<string>[],
      feeds: PromiseOrValue<string>[],
      baseCurrency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BTC_ETH_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

  ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  canAdminOverwrite(overrides?: CallOverrides): Promise<boolean>;

  changeAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feedBaseCurrencies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getUnderlyingPrice(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  price(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeeds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setPriceFeeds(
    underlyings: PromiseOrValue<string>[],
    feeds: PromiseOrValue<string>[],
    baseCurrency: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BTC_ETH_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

    ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<boolean>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feedBaseCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setPriceFeeds(
      underlyings: PromiseOrValue<string>[],
      feeds: PromiseOrValue<string>[],
      baseCurrency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewAdmin(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;
  };

  estimateGas: {
    BTC_ETH_PRICE_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feedBaseCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPriceFeeds(
      underlyings: PromiseOrValue<string>[],
      feeds: PromiseOrValue<string>[],
      baseCurrency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BTC_ETH_PRICE_FEED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETH_USD_PRICE_FEED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feedBaseCurrencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceFeeds(
      underlyings: PromiseOrValue<string>[],
      feeds: PromiseOrValue<string>[],
      baseCurrency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
