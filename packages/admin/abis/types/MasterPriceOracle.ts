/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MasterPriceOracleInterface extends utils.Interface {
  functions: {
    "add(address[],address[])": FunctionFragment;
    "admin()": FunctionFragment;
    "canAdminOverwrite()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "defaultOracle()": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "initialize(address[],address[],address,address,bool)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "price(address)": FunctionFragment;
    "setDefaultOracle(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "admin"
      | "canAdminOverwrite"
      | "changeAdmin"
      | "defaultOracle"
      | "getUnderlyingPrice"
      | "initialize"
      | "oracles"
      | "price"
      | "setDefaultOracle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canAdminOverwrite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOracle",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canAdminOverwrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOracle",
    data: BytesLike
  ): Result;

  events: {
    "NewAdmin(address,address)": EventFragment;
    "NewDefaultOracle(address,address)": EventFragment;
    "NewOracle(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDefaultOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracle"): EventFragment;
}

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewDefaultOracleEventObject {
  oldOracle: string;
  newOracle: string;
}
export type NewDefaultOracleEvent = TypedEvent<
  [string, string],
  NewDefaultOracleEventObject
>;

export type NewDefaultOracleEventFilter =
  TypedEventFilter<NewDefaultOracleEvent>;

export interface NewOracleEventObject {
  underlying: string;
  oldOracle: string;
  newOracle: string;
}
export type NewOracleEvent = TypedEvent<
  [string, string, string],
  NewOracleEventObject
>;

export type NewOracleEventFilter = TypedEventFilter<NewOracleEvent>;

export interface MasterPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<[boolean]>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultOracle(overrides?: CallOverrides): Promise<[string]>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _canAdminOverwrite: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDefaultOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    underlyings: PromiseOrValue<string>[],
    _oracles: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  canAdminOverwrite(overrides?: CallOverrides): Promise<boolean>;

  changeAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultOracle(overrides?: CallOverrides): Promise<string>;

  getUnderlyingPrice(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    underlyings: PromiseOrValue<string>[],
    _oracles: PromiseOrValue<string>[],
    _defaultOracle: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    _canAdminOverwrite: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  price(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDefaultOracle(
    newOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<boolean>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultOracle(overrides?: CallOverrides): Promise<string>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _canAdminOverwrite: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewAdmin(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;

    "NewDefaultOracle(address,address)"(
      oldOracle?: null,
      newOracle?: null
    ): NewDefaultOracleEventFilter;
    NewDefaultOracle(
      oldOracle?: null,
      newOracle?: null
    ): NewDefaultOracleEventFilter;

    "NewOracle(address,address,address)"(
      underlying?: null,
      oldOracle?: null,
      newOracle?: null
    ): NewOracleEventFilter;
    NewOracle(
      underlying?: null,
      oldOracle?: null,
      newOracle?: null
    ): NewOracleEventFilter;
  };

  estimateGas: {
    add(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _canAdminOverwrite: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canAdminOverwrite(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      underlyings: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _canAdminOverwrite: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
